스프링 부트와 AWS로 혼자 구현하는 웹 서비스

1장 ~ 3장 까지 다시 읽으면서 어노테이션 정리하자!!


@RestController
- 컨트롤러를 JSON 을 반환하는 컨트롤러로 만들어 준다.
- @ResponseBody 를 각 메소드에 일일히 붙히지 않아도 이것 한 번이면 된다.

@GetMapping
- HTTP Method 인 Get 의 요청을 받을 수 있는 API 를 만들어 준다.
- 예전에는 @RequestMapping 으로 사용되었다고 한다.

@RequestParam
- 외부에서 API 로 넘긴 파라미터를 가져오는 어노테이션 이다.


@Autowired
- 스프링이 관리하는 Bean 을 주고 받는다.

DTO: Data Transfer Object 의 약자 이다.

@RequiredArgsConstructor
- final 이 포함된 필드에 생성자를 생성해준다.

@NoArgsConstructor
- 기본 생성자 자동 추가

@Entity
- 테이블과 링크될 클래스임을 나타낸다.
Setter 는 해당 필드의 값을 변경할 때 필요하지만 Entity 클래스에서는 절대 Setter 를 만들지 않는다.
(대신, 해당 필드의 값 변경이 필요하면 명확히 그 목적과 의도를 나타낼 수 있는 메소드를 추가하자!!)

@Id
- 해당 테이블의 Primary Key 필드를 나타낸다.

@GeneratedValue
- GenerationType.IDENTITY 옵션을 추가해야만 auto_increment 가 됩니다.

@Transactional
- 함수 종료시에 Commit 이 된다.

JPA 메소드
postsRepository.save
- posts 테이블에 insert/update 쿼리를 실행하고 id 값이 없다면 insert 를, 있다면 update 를 실행한다.

postsRepository.findAll
- posts 테이블에 있는 모든 데이터를 조회해오는 메소드이다.

테스트용 어노테이션
@After
- Junit 에서 단위테스트가 끝날 때마다 수행되는 메소드를 지정한다.

